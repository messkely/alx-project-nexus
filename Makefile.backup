# ALX E-Commerce Backend - AWS Serverless Makefile
# Updated: August 8, 2025

.PHONY: help aws-deploy aws-info aws-destroy local-dev local-test local-migrate local-seed check-env setup-dev

# Default target
help:
	@echo "ÔøΩ ALX E-Commerce Backend - AWS Serverless & Local Development"
	@echo "=============================================================="
	@echo ""
	@echo "‚òÅÔ∏è AWS Serverless Deployment:"
	@echo "  make aws-deploy   - Deploy to AWS serverless (full setup)"
	@echo "  make aws-info     - Get AWS deployment information"
	@echo "  make aws-destroy  - Remove all AWS resources"
	@echo ""
	@echo "ÔøΩ Local Development:"
	@echo "  make local-dev    - Setup and run local development"
	@echo "  make local-test   - Run test suite"
	@echo "  make local-migrate- Run database migrations"
	@echo "  make local-seed   - Create local admin user"
	@echo "  make setup-dev    - Install development dependencies"
	@echo ""
	@echo "ÔøΩ Utilities:"
	@echo "  make check-env    - Verify environment configuration"
	@echo ""
	@echo "üìö Documentation:"
	@echo "  AWS Guide: docs/AWS_DEPLOYMENT.md"
	@echo "  Local Setup: docs/LOCAL_DEVELOPMENT_STATUS.md"

# AWS Serverless Commands
aws-deploy:
	@echo "‚òÅÔ∏è Deploying to AWS serverless..."
	@./scripts/deploy-aws.sh init

aws-info:
	@echo "üìä Getting AWS deployment information..."
	@./scripts/deploy-aws.sh info

aws-destroy:
	@echo "‚ö†Ô∏è Destroying AWS resources..."
	@./scripts/deploy-aws.sh destroy

# Local Development Commands
local-dev: setup-dev local-migrate
	@echo "üöÄ Starting local development server..."
	@echo "üìö API Documentation: http://127.0.0.1:8000/"
	@echo "üîß Admin Panel: http://127.0.0.1:8000/admin/ (admin/admin123)"
	@echo "‚ù§Ô∏è Health Check: http://127.0.0.1:8000/health/"
	@echo ""
	python manage.py runserver

setup-dev:
	@echo "üì¶ Installing development dependencies..."
	pip install -r requirements.txt
	@echo "‚úÖ Dependencies installed"

local-migrate:
	@echo "ÔøΩÔ∏è Running local database migrations..."
	python manage.py migrate
	@echo "‚úÖ Migrations completed"

local-seed:
	@echo "üå± Creating local admin user..."
	@python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else print('‚úÖ Admin user already exists (admin/admin123)')"
	@echo "‚úÖ Local admin user ready"

local-test:
	@echo "üß™ Running test suite..."
	python manage.py test

# Environment and Setup
check-env:
	@echo "üîç Checking environment configuration..."
	@test -f .env || (echo "‚ùå .env not found for local development" && exit 1)
	@test -f .env.aws.example || (echo "‚ùå .env.aws.example not found" && exit 1)
	@echo "‚úÖ Environment files found"
	@echo ""
	@echo "üìã Environment Status:"
	@echo "  Local Development: .env ‚úÖ"
	@echo "  AWS Template: .env.aws.example ‚úÖ"
	@echo "  AWS Config: .env.aws $(if [ -f .env.aws ]; then echo '‚úÖ'; else echo '‚ùå (run ./scripts/deploy-aws.sh init first)'; fi)"
# Production Commands
production:
	@echo "üöÄ Starting production environment..."
	@make check-env
	@make check-docker
	@echo "üèóÔ∏è Building and starting containers..."
	docker compose -f docker-compose.production.yml up -d --build
	@echo "‚è≥ Waiting for services to be ready..."
	@sleep 15
	@make status
	@echo "‚úÖ Production environment started!"
	@echo "üåê Application available at: http://localhost"

logs:
	@echo "üìã Viewing application logs..."
	docker compose -f docker-compose.production.yml logs -f

status:
	@echo "üìä Checking service status..."
	docker compose -f docker-compose.production.yml ps
	@echo ""
	@echo "üîç Health checks:"
	@docker compose -f docker-compose.production.yml exec -T web python manage.py check --deploy || echo "‚ö†Ô∏è Django health check failed"
	@curl -s http://localhost/health/ > /dev/null 2>&1 && echo "‚úÖ API health check passed" || echo "‚ö†Ô∏è API health check failed"

backup:
	@echo "üíæ Creating database backup..."
	@mkdir -p backups
	@docker compose -f docker-compose.production.yml exec -T db pg_dump -U $${DB_USER:-ecommerce_user} $${DB_NAME:-ecommerce} > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup created in backups/ directory"

restore:
	@echo "üîÑ Restoring from backup..."
	@test -n "$(BACKUP_FILE)" || (echo "‚ùå Please specify BACKUP_FILE=path/to/backup" && exit 1)
	@test -f "$(BACKUP_FILE)" || (echo "‚ùå Backup file not found: $(BACKUP_FILE)" && exit 1)
	docker compose -f docker-compose.production.yml exec -T db psql -U $${DB_USER:-ecommerce_user} -d $${DB_NAME:-ecommerce} < "$(BACKUP_FILE)"
	@echo "‚úÖ Database restored successfully"

clean:
	@echo "üßπ Cleaning up Docker resources..."
	docker compose -f docker-compose.production.yml down -v
	docker system prune -f
	docker volume prune -f
	@echo "‚úÖ Cleanup completed"

# Development Helpers (for local development only)
dev-install:
	@echo "üì¶ Installing development dependencies..."
	pip install -r requirements.txt

dev-migrate:
	@echo "üóÉÔ∏è Running migrations..."
	python manage.py migrate

dev-seed:
	@echo "üå± Seeding database..."
	python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else print('Admin user already exists')"
	@echo "üë§ Admin user created: admin/admin123"

dev-test:
	@echo "üß™ Running tests..."
	python manage.py test

# Advanced commands
migrate-prod:
	@echo "üóÉÔ∏è Running production migrations..."
	docker compose -f docker-compose.production.yml exec web python manage.py migrate
	@echo "‚úÖ Production migrations completed"

seed-prod:
	@echo "üå± Seeding production database..."
	docker compose -f docker-compose.production.yml exec web python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else print('Admin user already exists')"
	@echo "üë§ Production admin user created"

shell-prod:
	@echo "üêö Opening production Django shell..."
	docker compose -f docker-compose.production.yml exec web python manage.py shell

collectstatic-prod:
	@echo "üìÅ Collecting static files..."
	docker compose -f docker-compose.production.yml exec web python manage.py collectstatic --noinput
	@echo "‚úÖ Static files collected"


