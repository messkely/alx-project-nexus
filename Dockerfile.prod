# Production-ready Dockerfile for ALX E-Commerce Backend
FROM python:3.11-slim-bookworm AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements-docker.txt .
RUN pip install --no-cache-dir -r requirements-docker.txt

# Production stage
FROM python:3.11-slim-bookworm AS production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    DJANGO_SETTINGS_MODULE=ecommerce_backend.settings

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user with specific UID/GID for consistency
RUN groupadd -r app && useradd -r -g app -u 1000 app \
    && mkdir -p /app/staticfiles /app/media /app/logs \
    && chown -R app:app /app

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code (only necessary files)
COPY --chown=app:app manage.py ./
COPY --chown=app:app ecommerce_backend/ ./ecommerce_backend/
COPY --chown=app:app users/ ./users/
COPY --chown=app:app catalog/ ./catalog/
COPY --chown=app:app cart/ ./cart/
COPY --chown=app:app orders/ ./orders/
COPY --chown=app:app reviews/ ./reviews/
COPY --chown=app:app static/ ./static/
COPY --chown=app:app requirements-docker.txt ./

# Switch to non-root user
USER app

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health/ || exit 1

# Production command with optimal settings
CMD ["gunicorn", \
    "--bind", "0.0.0.0:8000", \
    "--workers", "4", \
    "--worker-class", "sync", \
    "--worker-connections", "1000", \
    "--max-requests", "1000", \
    "--max-requests-jitter", "100", \
    "--timeout", "30", \
    "--keep-alive", "2", \
    "--access-logfile", "/app/logs/gunicorn-access.log", \
    "--error-logfile", "/app/logs/gunicorn-error.log", \
    "--log-level", "info", \
    "ecommerce_backend.wsgi:application"]
